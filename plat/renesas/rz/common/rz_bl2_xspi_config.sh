#!/bin/sh
# Copyright (c) 2021, Renesas Electronics Corporation. All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

envfile=$1
outfile=$2
_devices=
_index=0

usage()
{
	echo ""
	echo "Please specify environment definition file and output file"
	exit 1
}

error()
{
	local message=$1
	shift
	echo ""
	echo "Error: $message"
	exit 1
}

add_device()
{
	local basename=$1
	shift

	# indirect dereference
	eval _if_name=\$RZ_${basename}_IF
	eval _if_config=\$RZ_${basename}_IF_CONFIG
	eval _device=\$${basename}_DEVICE
	eval _option=\$${basename}_OPTION
	eval _if_option=\$${basename}_IF_OPTION

	# add if defined
	if [ -n "$_device" ]; then
		# IF
		cat << EOT >> "${outfile}"
${_if_name}_ctrl_t xspi${_index}_ctrl;

EOT
		if [ -n "$_if_option" ]; then
		        cat << EOT >> "${outfile}"
const ${_if_name}_ext_t xspi${_index}_ext = {
	${_if_option}
};

const xspi_cfg_t xspi${_index}_cfg = {
	${_if_config},
	.extend=&xspi${_index}_ext
};
EOT
		else
		        cat << EOT >> "${outfile}"
const xspi_cfg_t xspi${_index}_cfg = {
	${_if_config},
	.extend=NULL
};
EOT
		fi
		cat << EOT >> "${outfile}"

const xspi_instance_t xspi${_index} = {
	.ctrl=&xspi${_index}_ctrl,
	.cfg=&xspi${_index}_cfg,
	.api=&${_if_name}_api
};

EOT

		# DEVICE
		cat << EOT >> "${outfile}"
${_device}_ctrl_t xspidevice${_index}_ctrl;

EOT
		if [ -n "$_option" ]; then
		        cat << EOT >> "${outfile}"
const ${_device}_ext_t xspidevice${_index}_ext = {
	${_option}
};

const xspidevice_cfg_t xspidevice${_index}_cfg = {
	.xspi=&xspi${_index},
	.extend=&xspidevice${_index}_ext
};
EOT
		else
		        cat << EOT >> "${outfile}"
const xspidevice_cfg_t xspidevice${_index}_cfg = {
	.xspi=&xspi${_index},
	.extend=NULL
};
EOT
		fi
		cat << EOT >> "${outfile}"

const xspidevice_instance_t xspidevice${_index} = {
	.ctrl=&xspidevice${_index}_ctrl,
	.cfg=&xspidevice${_index}_cfg,
	.api=&${_device}_api
};

EOT

                # append device
		_devices="${_devices} xspidevice${_index}"

		_index=`expr ${_index} + 1`
	fi
}

# Script begin
if [ -z "$envfile" ]; then
	usage
fi

if [ -z "$outfile" ]; then
	usage
fi

# Create outfile and test if failed
echo "/* Generated by ${0} */" > "$outfile"
if ! [ $? ]; then
	error "Aborted."
fi

# Import environment
if [ -f "$envfile" ]; then
	. "$envfile"
fi

# Append includes
for header in $RZ_XSPI_HEADERS
do
	echo "#include \"$header\"" >> "${outfile}"
done
echo "" >> "${outfile}"

# Append definitions
for device in $RZ_XSPI_CONFIGS
do
	add_device $device
done

# List device instances
if [ -n "$_devices" ]; then
	echo "const int xspidevices_count = ${_index};" >> "${outfile}"
	echo "const xspidevice_instance_t * xspidevices[${_index}] = {" >> "${outfile}"
	for instance in $_devices
	do
		echo "	&${instance}," >> "${outfile}"
	done
	echo "};" >> "${outfile}"
fi

